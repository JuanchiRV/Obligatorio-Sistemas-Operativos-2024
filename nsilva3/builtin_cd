#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#define MAXCWD 1024




extern int builtin_cd(int argc, char **argv) {
    // Si se pasa un argumento al comando cd
    if (argc == 2) {
        char camino[MAXCWD]; // Buffer para almacenar el camino especificado
        strcpy(camino, argv[1]); // Copia el camino especificado en el buffer 'camino'
        char direct[MAXCWD]; // Buffer para almacenar el directorio actual
        
        // Si el camino especificado no es absoluto
        if (argv[1][0] != '/') {
            // Si el argumento es '-', se cambia al directorio anterior
            if (argv[1][0] == '-') {
                // Obtiene el directorio actual y lo guarda en 'direct'
                if (getcwd(direct, sizeof(direct)) == NULL) {
                    perror("getcwd error"); // Imprime un mensaje de error si getcwd falla
                    return 1; // Retorna 1 indicando error
                }
                // Cambia al directorio almacenado en la variable de ambiente OLDPWD
                if (chdir(getenv("OLDPWD")) != 0) {
                    perror("chdir error"); // Imprime un mensaje de error si chdir falla
                    return 1; // Retorna 1 indicando error
                }
                setenv("OLDPWD", direct, 1); // Actualiza OLDPWD con el valor de direct
                setenv("PWD", getenv("OLDPWD"), 1); // Actualiza PWD con el valor de OLDPWD
                return 0; // Retorna 0 indicando éxito
            }
            // Obtiene el directorio actual y lo guarda en 'direct'
            if (getcwd(direct, sizeof(direct)) == NULL) {
                perror("getcwd error"); // Imprime un mensaje de error si getcwd falla
                return 1; // Retorna 1 indicando error
            }
            setenv("OLDPWD", direct, 1); // Actualiza OLDPWD con el valor de direct
            strcat(direct, "/"); // Añade un separador '/' al final de direct
            strcat(direct, camino); // Concatenar el camino relativo al directorio actual
            // Cambia al directorio concatenado (relativo)
            if (chdir(direct) != 0) {
                perror("chdir error"); // Imprime un mensaje de error si chdir falla
                return 1; // Retorna 1 indicando error
            }
            setenv("PWD", direct, 1); // Actualiza PWD con el nuevo directorio
            return 0; // Retorna 0 indicando éxito
        }
        // Si el camino especificado es absoluto, cambia directamente a ese directorio
        if (chdir(camino) != 0) {
            perror("chdir error"); // Imprime un mensaje de error si chdir falla
            return 1; // Retorna 1 indicando error
        }
        setenv("PWD", camino, 1); // Actualiza PWD con el nuevo directorio
        return 0; // Retorna 0 indicando éxito
    }

    // Si no se pasa ningún argumento, cambia al directorio HOME
    if (argc == 1) {
        if (chdir(getenv("HOME")) != 0) {
            perror("chdir error"); // Imprime un mensaje de error si chdir falla
            return 1; // Retorna 1 indicando error
        }
        setenv("PWD", getenv("HOME"), 1); // Actualiza PWD con el directorio HOME
        return 0; // Retorna 0 indicando éxito
    }

    // Si se pasa un número incorrecto de argumentos, imprime el mensaje de ayuda
    printf("Use help cd para ver el funcionamiento de cd\n");
    return 1; // Retorna 1 indicando error
}
